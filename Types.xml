<library>
	<type name="Body_Type">
		<add_bps type="script">
			foreach (bp_attr, this.bp_attrs) {
				bp = GetAttribute(this, bp_attr)
				
				set(entity, bp_attr, bp)
				list add (entity.bp_attrs, bp_attr)
			}
		</add_bps>
	</type>
	
	<type name="Creature">
		<bp_attrs type="stringlist" />
		
		<creature_type_num type="dictionary" />
		<creature_type_ratio type="dictionary" />
		
		<hand_trait type="object">None</hand_trait>
		
		<conscious type="boolean">true</conscious>
		
		<dead type="boolean">false</dead>
		<death_type type="string">None</death_type>
		
		<add_creature_type type="script">
			<!--Creature Type Num-->
			if (not DictionaryContains(this.creature_type_num, creature_type.name)) {
				DictionaryAdd(this.creature_type_num, creature_type.name, 1)
			}
			else {
				num = DictionaryItem(this.creature_type_num, creature_type.name)
				
				DictionaryAdd(this.creature_type_num, creature_type.name, num + 1)
			}
			
			<!--Creature Type Ratio-->
			total = 0
			
			foreach (key, this.creature_type_num) {
				val = DictionaryItem(this.creature_type_num, key)
				
				total = total + val
			}
			
			foreach (key, this.creature_type_num) {
				val = DictionaryItem(this.creature_type_num, key)
				
				ratio = (val / total) * 100
				
				DictionaryAdd(this.creature_type_ratio, key, ratio)
			}
		</add_creature_type>
	
		<add_bps type="script">
			creature_type = Get_Random_Creature_Type_Weighted(this)
			
			body_type = creature_type.body_type
			
			do(body_type, "add_bps", QuickParams("entity", this))
		</add_bps>
		
		<set type="script">
			this.bp_attrs = NewStringList()
			
			this.creature_type_num = NewDictionary()
			this.creature_type_ratio = NewDictionary()
			
			this.hand_trait = None
			
			this.conscious = true
			
			this.dead = false
			this.death_type = "None"
			
			do(this, "destroy_inventory")
			
			do(this, "set_needs")
			do(this, "set_needs_decay")
			do(this, "set_stats")
		</set>
		
		<set_needs type="script">
			foreach (key, game.needs) {
				do(this, "set_need", QuickParams("attr", key, "max", 100))
			}
		</set_needs>
		
		<set_need type="script">
			set(this, attr + "_cur", max)
			set(this, attr + "_max", max)
		</set_need>
		
		<set_needs_decay type="script">
			foreach (key, game.needs) {
				creature_type = Get_Random_Creature_Type_Weighted(this)
				
				decay = GetAttribute(creature_type, key + "_decay")
				
				do(this, "set_need_decay", QuickParams("attr", key, "decay", decay))
			}
		</set_needs_decay>
		
		<set_need_decay type="script">
			set(this, attr + "_decay", decay)
		</set_need_decay>
		
		<mod_need type="script">
			cur = GetAttribute(this, attr + "_cur")
			max = GetAttribute(this, attr + "_max")
			
			cur = cur + mod
			
			if (cur > max) {
				cur = max
			}
			
			set(this, attr + "_cur", cur)
		</mod_need>
		
		<set_stats type="script">
			foreach (key, game.stats) {
				do(this, "set_stat_lvl", QuickParams("attr", key, "lvl", 1))
			}
		</set_stats>
		
		<set_stat_lvl type="script">
			set(this, attr + "_lvl", lvl)
			
			set(this, attr + "_curxp", 0)
			
			set(this, attr + "_maxxp", (lvl + 1) * 100)
		</set_stat_lvl>
		
		<mod_stat_lvl type="script">
			lvl = GetAttribute(this, attr + "_lvl")
			
			set(this, attr + "_lvl", lvl + mod)
			set(this, attr + "_curxp", 0)
			set(this, attr + "_maxxp", (lvl + mod) * 100)
		</mod_stat_lvl>
		
		<mod_stat_xp type="script">
			lvl = GetAttribute(this, attr + "_lvl")
			cur = GetAttribute(this, attr + "_curxp")
			max = GetAttribute(this, attr + "_maxxp")
			
			cur = cur + mod
			
			lvl_mod = 0
			
			if (cur >= max) {
				lvl_mod = cur / max
				
				cur = cur % max
			}
			
			set(this, attr + "_lvl", lvl + lvl_mod)
			set(this, attr + "_curxp", cur)
			set(this, attr + "_maxxp", ((lvl + lvl_mod) + 1) * 100)
			
		</mod_stat_xp>
		
		<equip_item type="script">
			DictionaryAdd(bp, "equip_item", item)
			
			item.is_equipped = true
			item.drop = false
			
			do(item, "set_iverbs")
			
			do(item, "set_alias")
		</equip_item>
		
		<unequip_item type="script">
			DictionaryAdd(bp, "equip_item", None)
			
			item.is_equipped = false
			item.drop = true
			
			do(item, "set_iverbs")
			
			do(item, "set_alias")
		</unequip_item>
		
		<destroy_inventory type="script">
			obj_names = NewStringList()
			
			foreach (obj, GetAllChildObjects(this)) {
				list add (obj_names, obj.name)
			}
			
			foreach (obj_name, obj_names) {
				destroy(obj_name)
			}
		</destroy_inventory>
	
		<consume type="script">
			foreach (key, game.needs) {
				if (HasAttribute(item, key + "_mod")) {
					mod = GetAttribute(item, key + "_mod")
					
					do(this, "mod_need", QuickParams("attr", key, "mod", mod))
				}
			}
			
			destroy(item.name)
		</consume>
	</type>
	
	<type name="Sentient">
		<inherit name="Creature" />
		
		<gold type="int">0</gold>
	</type>
	
	<type name="Creature_Type">
		<weight type="int">1</weight>
		
		<body_type type="object">None</body_type>
		
		<alcohol_decay type="int">-4</alcohol_decay>
		<energy_decay type="int">-4</energy_decay>
		<hunger_decay type="int">-4</hunger_decay>
		<thirst_decay type="int">-4</thirst_decay>
	</type>
	
	<type name="Faction">
		<culture type="object">None</culture>
		
		<capital type="object">None</capital>
		
		<locations type="objectlist" />
		
		<gen_alias type="script">
			prefix = PickOneString(this.culture.faction_prefixes)
			
			suffix = PickOneString(game.faction_suffixes)
			
			this.alias = "The " + prefix + " " + suffix
		</gen_alias>
	</type>
	
	<type name="Food">
		<inherit name="Item" />
		
		<alcohol_mod type="int">0</alcohol_mod>
		<hunger_mod type="int">0</hunger_mod>
		<thirst_mod type="int">0</thirst_mod>
		
		<can_consume type="boolean">true</can_consume>
	</type>
	
	<type name="Hand_Trait">
		<inherit name="Trait" />
		
		<hand_stats type="stringlist">
			<value>left_hand</value>
			<value>right_hand</value>
		</hand_stats>
		
		<set_hand_stats type="script">
			foreach (hand_stat, this.hand_stats) {
				do(entity, "set_stat_lvl", QuickParams("attr", hand_stat, "lvl", 100))
			}
		</set_hand_stats>
	</type>
	
	<type name="Item">
		<inherit name="editor_object" />
		
		<has_material type="boolean">false</has_material>
		
		<material type="object">None</material>
		
		<take type="boolean">true</take>
		
		<can_equip type="boolean">true</can_equip>
		<is_equipped type="boolean">false</is_equipped>
		
		<can_cut_wood type="boolean">false</can_cut_wood>
		<can_mine type="boolean">false</can_mine>
		<can_fish type="boolean">false</can_fish>
		
		<can_craft type="boolean">false</can_craft>
		
		<can_forage type="boolean">false</can_forage>
		
		<can_consume type="boolean">false</can_consume>
		
		<units type="int">1</units>
		
		<durability_cur type="int">1</durability_cur>
		<durability_max type="int">1</durability_max>
		
		<can_stack type="boolean">true</can_stack>
		
		<quantity type="int">1</quantity>
		
		<base_value type="int">1</base_value>
		
		<reactants type="dictionary" />
		
		<generate type="script">
			<!--Clone-->
			clone = CloneObject(this)
			
			<!--Durability-->
			if (clone.material = None and not DoesInherit(clone, "Material")) {
				clone.durability_cur = clone.units
				clone.durability_max = clone.units
			}
			
			else if (DoesInherit(clone, "Material")) {
				clone.durabiltiy_cur = clone.durability
				clone.durabiltiy_max = clone.durability
			}
			
			else {
				clone.durability_cur = clone.material.durability * 25
				clone.durability_max = clone.material.durability * 25
			}
			
			<!--Alias-->
			do(clone, "set_alias")
			
			<!--Verbs-->
			do(clone, "set_iverbs")
			
			<!--Parent-->
			clone.parent = parent
		</generate>
		
		<look type="script">
			<!--Base Value-->
			msg("*Base Value: " + ToString(this.base_value))
			
			msg(" ")
			
			<!--Durability-->
			msg("*Durability: " + ToString(this.durability_cur) + " / " + ToString(this.durability_max))
			
			<!--Reagents-->
			if (HasAttribute(this, "reagents")) {
				msg(" ")
				
				msg("*Reagent(s):")
				
				foreach (key, this.reagents) {
					reagent = GetObject(key)
					val = DictionaryItem(this.reagents, key)
					
					msg("-" + reagent.alias + ": " + ToString(val))
				}
			}
			
			<!--Need Mods-->
			s_list = NewStringList()
			
			foreach (key, game.needs) {
				val = DictionaryItem(game.needs, key)
				
				if (HasAttribute(this, key + "_mod")) {
					mod = GetAttribute(this, key + "_mod")
					
					if (0 > mod or mod > 0) {
					
						list add (s_list, val + ": " + ToString(mod))
					}
				}
			}
			
			if (ListCount(s_list) > 0) {
				msg(" ")
				
				msg("*Needs:")
				
				foreach (s, s_list) {
					msg("-" + s)
				}
			}
		</look>
		
		<set_alias type="script">
			alias = this.main_alias
			
			<!--Equipped-->
			if (this.is_equipped) {
				alias = alias + " (Equipped)"
			}
			
			<!--Quantity-->
			if (this.quantity > 1) {
				alias = alias + " (" + ToString(this.quantity) + ")"
			}
			
			this.alias = alias
		</set_alias>
	
		<set_verbs type="script">
			do(this, set_iverbs)
		</set_verbs>
	
		<set_iverbs type="script">
			verbs = NewStringList()
			
			<!--Look-->
			list add (verbs, "Look")
			
			<!--Eat-->
			if (this.can_consume) {
				list add (verbs, "Consume")
			}
			
			<!--Sell-->
			list add (verbs, "Sell")
			
			<!--Equip-->
			if (this.can_equip) {
				if (not this.is_equipped) {
					list add (verbs, "Equip")
					
					<!--Cut Wood-->
					if (ListContains(this.inventoryverbs, "Cut Wood")) {
						list remove(this.inventoryverbs, "Cut Wood")
					}
					
					<!--Mine-->
					if (ListContains(this.inventoryverbs, "Mine")) {
						list remove(this.inventoryverbs, "Mine")
					}
					
					<!--Fish-->
					if (ListContains(this.inventoryverbs, "Fish")) {
						list remove(this.inventoryverbs, "Fish")
					}
				}
				
				else {
					<!--Cut Wood-->
					if (this.can_cut_wood) {
						list add (verbs, "Cut Wood")
					}
					
					<!--Mine-->
					if (this.can_mine) {
						list add (verbs, "Mine")
					}
					
					<!--Fish-->
					if (this.can_fish) {
						list add (verbs, "Fish")
					}
				
					list add (verbs, "Unequip")
				}
			}
			
			<!--Craft-->
			if (this.can_craft) {
				list add (verbs, "Craft")
			}
			
			<!--Drop-->
			if (this.drop) {
				list add (verbs, "Drop")
			}
			
			this.inventoryverbs = verbs
		</set_iverbs>
	
		<mod_durability type="script">
			cur = this.durability_cur
			max = this.durability_max
			
			cur = cur + mod
			
			if (cur > max) {
				cur = max
			}
			
			set(this, "durability_cur", cur)
			
			if (0 >= cur) {
				if (this.parent = player) {
					msg("Your " + this.alias + " has been destroyed!")
				}
				
				if (this.is_equipped) {
					bps = Get_All_BPs(this.parent)
					bp = Get_Dict_By_Key_Val(bps, "equip_item", this)
					
					do(this.parent, "unequip_item", QuickParams("bp", bp, "item", this))
				}
				
				destroy(this.name)
			}
		</mod_durability>
	
		<mod_quantity type="script">
			this.quantity = this.quantity + mod
			
			do(this, "set_alias")
			
			if (0 >= this.quantity) {
				if (this.is_equipped) {
					bps = Get_All_BPs(this.parent)
					bp = Get_Dict_By_Key_Val(bps, "equip_item", this)
					
					do(this.parent, "unequip_item", QuickParams("bp", bp, "item", this))
				}
				
				destroy(this.name)
			}
		</mod_quantity>
	</type>
	
	<type name="Material">
		<inherit name="Item" />
		
		<is_hard type="boolean">false</is_hard>
		
		<durability type="int">1</durability>
	</type>
	
	<type name="Mineral">
		<inherit name="Item" />
		
		<mineral_chance type="int">100</mineral_chance>
	</type>
	
	<type name="Tool">
		<inherit name="Item" />
		
		<has_material type="boolean">true</has_material>
		
		<material type="object">None</material>
	</type>
	
	<type name="Trait">
	</type>
	
	<type name="Race">
		<inherit name="Creature_Type" />
		
		<faction_prefixes type="stringlist" />
		
		<name_prefixes type="stringlist" />
		
		<name_suffixes type="stringlist" />
	</type>
	
	<type name="Role">
		<items type="dictionary" />
		<stats type="stringlist" />
		
		<max type="int">50</max>
		
		<add_items type="script">
			foreach (key, this.items) {
				obj = GetObject(key)
				num = DictionaryItem(this.items, key)
				
				for (i, 1, num) {
					do(obj, "generate", QuickParams("parent", entity))
				}
			}
		</add_items>
		
		<add_stats type="script">
			max = 10
			
			if (not DoesInherit(entity, "editor_player")) {
				max = 100 
			}
			
			foreach (attr, this.stats) {
				mod = GetRandomInt(0, max)
				
				do(entity, "mod_stat_lvl", QuickParams("attr", attr, "mod", mod))
			}
		</add_stats>
		
		<add_loc_inventory type="script" />
		
		<products type="objectlist" />
	</type>
	
	<type name="TA_Room">
		<inherit name="editor_room" />
		
		<isroom type="boolean">true</isroom>
		
		<usedefaultprefix type="boolean">false</usedefaultprefix>
	</type>
	
	<type name="Weapon">
		<inherit name="Item" />
		
		<has_material type="boolean">true</has_material>
		
		<can_stack type="boolean">false</can_stack>
		
		<material_types type="stringlist">
			<value>is_hard</value>
		</material_types>
		
		<material type="object">None</material>
	</type>
	
	<type name="Workshop">
		<inherit name="Item" />
		
		<units type="int">10</units>
		
		<can_craft type="boolean">true</can_craft>
		
		<products type="objectlist" />
		
		<stat_attr type="string">None</stat_attr>
	</type>
</library>